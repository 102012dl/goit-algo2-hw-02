HW T 2 1 

Завдання 1. Оптимізація черги 3D-принтера в університетській лабораторії 

from typing import List, Dict
from dataclasses import dataclass

@dataclass
class PrintJob:
    id: str
    volume: float
    priority: int
    print_time: int

@dataclass
class PrinterConstraints:
    max_volume: float
    max_items: int

def optimize_printing(print_jobs: List[Dict], constraints: Dict) -> Dict:
    """
    Оптимізує чергу 3D-друку згідно з пріоритетами та обмеженнями принтера.

    Args:
        print_jobs: список завдань на друк у вигляді словників
        constraints: словник із обмеженнями принтера

    Returns:
        Dict з порядком друку та загальним часом
    """
    # Перетворюємо вхідні словники на об'єкти
    jobs = [PrintJob(**job) for job in print_jobs]
    cons = PrinterConstraints(**constraints)

    # Сортуємо за пріоритетом: 1 (найвищий) → 3 (найнижчий)
    jobs.sort(key=lambda j: j.priority)

    print_order = []
    total_time = 0
    current_group = []
    current_volume = 0.0

    for job in jobs:
        if not current_group:
            # Починаємо нову групу
            current_group = [job]
            current_volume = job.volume
        else:
            # Перевіряємо, чи можна додати в групу не перевищивши обмежень
            if (len(current_group) < cons.max_items and
                current_volume + job.volume <= cons.max_volume):
                current_group.append(job)
                current_volume += job.volume
            else:
                # Завершуємо поточну групу: додаємо її задачі до порядку
                print_order.extend([j.id for j in current_group])
                total_time += max(j.print_time for j in current_group)
                # Розпочинаємо нову групу з поточного завдання
                current_group = [job]
                current_volume = job.volume

    # Обробляємо останню групу
    if current_group:
        print_order.extend([j.id for j in current_group])
        total_time += max(j.print_time for j in current_group)

    return {
        "print_order": print_order,
        "total_time": total_time
    }

# Тестування
def test_printing_optimization():
    test1_jobs = [
        {"id": "M1", "volume": 100, "priority": 1, "print_time": 120},
        {"id": "M2", "volume": 150, "priority": 1, "print_time": 90},
        {"id": "M3", "volume": 120, "priority": 1, "print_time": 150}
    ]
    test2_jobs = [
        {"id": "M1", "volume": 100, "priority": 2, "print_time": 120},
        {"id": "M2", "volume": 150, "priority": 1, "print_time": 90},
        {"id": "M3", "volume": 120, "priority": 3, "print_time": 150}
    ]
    test3_jobs = [
        {"id": "M1", "volume": 250, "priority": 1, "print_time": 180},
        {"id": "M2", "volume": 200, "priority": 1, "print_time": 150},
        {"id": "M3", "volume": 180, "priority": 2, "print_time": 120}
    ]
    constraints = {"max_volume": 300, "max_items": 2}

    print("Тест 1 (однаковий пріоритет):")
    res1 = optimize_printing(test1_jobs, constraints)
    print(f"Порядок друку: {res1['print_order']}")
    print(f"Загальний час: {res1['total_time']} хвилин\n")

    print("Тест 2 (різні пріоритети):")
    res2 = optimize_printing(test2_jobs, constraints)
    print(f"Порядок друку: {res2['print_order']}")
    print(f"Загальний час: {res2['total_time']} хвилин\n")

    print("Тест 3 (перевищення обмежень):")
    res3 = optimize_printing(test3_jobs, constraints)
    print(f"Порядок друку: {res3['print_order']}")
    print(f"Загальний час: {res3['total_time']} хвилин")

if __name__ == "__main__":
    test_printing_optimization()





Тест 1 (однаковий пріоритет):
Порядок друку: ['M1', 'M2', 'M3']
Загальний час: 270 хвилин

Тест 2 (різні пріоритети):
Порядок друку: ['M2', 'M1', 'M3']
Загальний час: 270 хвилин

Тест 3 (перевищення обмежень):
Порядок друку: ['M1', 'M2', 'M3']
Загальний час: 450 хвилин


